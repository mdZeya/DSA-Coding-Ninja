Return subset of an array
Send Feedback
Given an integer array (of length n), find and return all the subsets of input array.
Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.
Note : The order of subsets are not important.
Input format :

Line 1 : Size of array

Line 2 : Array elements (separated by space)

Sample Input:
3
15 20 12
Sample Output:
[] (this just represents an empty array, don't worry about the square brackets)
12 
20 
20 12 
15 
15 12 
15 20 
15 20 12 

Main Code .............................................................................................!

import java.util.Scanner;

public class runner {
	
	public static int[] takeInput() {
		Scanner s = new Scanner(System.in);
		int size = s.nextInt();
		int arr[] = new int[size];
		for (int i = 0; i < size; i++) {
			arr[i] = s.nextInt();
		}
		return arr;
	}
	
	public static void main(String[] args) {
		int[] input = takeInput();
		int output[][] = solution.subsets(input);
		for(int i = 0; i < output.length; i++) {
			for(int j = 0; j < output[i].length; j++) {
				System.out.print(output[i][j] + " ");
			}
			System.out.println();
		}
	}
}


Class Code............................................................................................!

public class solution {

	// Return a 2D array that contains all the subsets
	public static int[][] subsets(int input[]) {
		// Write your code here
//public static int[][] subsets(int[] input)
	//{
		if(input.length == 0)
		{
			int[][] result = new int[1][0];
			return result;
		}
		int[] newInput = new int[input.length - 1];
		for(int i = 1;i<input.length;i++)
			newInput[i - 1] = input[i];
		int[][] halfResult = subsets(newInput);
		int[][] result = new int[2 * halfResult.length][];
		for(int i = 0 ;i< result.length; i++)
		{
			if(i < halfResult.length)
				result[i] = halfResult[i];
			else
			{
				int[] toAdd = new int[halfResult[i % halfResult.length].length + 1];
				toAdd[0] = input[0];
				for(int j = 1; j < toAdd.length ; j++)
					toAdd[j] = halfResult[i % halfResult.length][j - 1];
				result[i] = toAdd;
			}			
		}
		return result;
	}
}
