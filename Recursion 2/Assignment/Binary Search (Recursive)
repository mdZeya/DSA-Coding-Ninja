Binary Search (Recursive)
Send Feedback
Given an integer sorted array (sorted in increasing order) and an element x, find the x in given array using binary search. Return the index of x.
Return -1 if x is not present in the given array.
Note : If given array size is even, take first mid.
Input format :

Line 1 : Array size

Line 2 : Array elements (separated by space)

Line 3 : x (element to be searched)

Sample Input :
6
2 3 4 5 6 8 
5 
Sample Output:
3 

Main Code ...............................................................................!

import java.util.Scanner;

public class runner {
	static Scanner s = new Scanner(System.in);
	public static int[] takeInput() {
		int size = s.nextInt();
		int arr[] = new int[size];
		for (int i = 0; i < size; i++) {
			arr[i] = s.nextInt();
		}
		return arr;
	}
	
	public static void main(String[] args) {
		int[] input = takeInput();
		int element = s.nextInt();
		System.out.println(solution.binarySearch(input, element));
	}
}


Class Code.............................................................................................!

public class solution {

	// element - number to be searched
	public static int binarySearch(int input[], int element) {
		return helpBinarySearch(input,0,input.length-1,element);
    }
    public static int helpBinarySearch(int input[], int si, int ei, int element){
         //  si = 0;
         // ei = input.length;
      //  if(si<ei){
        
           int mid = (si+ei)/2;
        if(si>=ei){
            return -1;
        }
        if(input.length == 0){
            return 0;
        }
 

        if(input[mid] == element){
            return mid;
        }
        if(input[mid] > element){
            return helpBinarySearch(input,si,mid-1,element);
        }
       
            return helpBinarySearch(input, mid+1, ei,element);
        
        
        // return -1;
    }
}
